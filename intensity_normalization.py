# -*- coding: utf-8 -*-
"""Intensity_Normalization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ed9BhZ1j4Lt0YlUEt4eJioKUg5DiRJpI
"""

pip install SimpleITK

import SimpleITK as sitk
import nibabel as nib
import numpy as np
from google.colab import drive
drive.mount('/content/drive', force_remount=True)
import matplotlib.pyplot as plt

"""Intensity normalization is a preprocessing step commonly used in medical image analysis to enhance the consistency and comparability of images. In medical imaging, different factors such as scanner settings, patient characteristics, and acquisition protocols can result in significant variations in the intensity values of images. Intensity normalization aims to mitigate these variations by scaling or adjusting the intensity values of the images to a common scale or distribution.

The main goal of intensity normalization is to make different images more comparable and to reduce the impact of intensity variations on subsequent analysis tasks, such as segmentation, registration, or classification.

There are several methods for intensity normalization, including:

Linear Scaling: This involves mapping the intensity values of an image to a specified range, such as [0, 1] or [0, 255], by linearly scaling the intensity values.

Z-score Normalization: This method standardizes the intensity values of an image to have a mean of zero and a standard deviation of one by subtracting the mean intensity value of the image from each voxel and then dividing by the standard deviation.

Histogram Matching: This technique aligns the intensity histogram of an image to match a reference histogram, typically derived from a set of images with consistent intensity characteristics.

Non-linear Transformation: Non-linear transformations, such as histogram equalization or contrast limited adaptive histogram equalization (CLAHE), can be applied to enhance the local contrast of the image and improve its overall appearance.

Normalization based on tissue properties: In medical imaging, certain tissues or structures may have specific intensity characteristics. Normalization methods can be tailored to preserve these tissue-specific properties while adjusting overall intensity values.

The choice of intensity normalization method depends on factors such as the characteristics of the image dataset, the specific requirements of the analysis task, and computational considerations. Proper intensity normalization can help improve the accuracy and reliability of subsequent image analysis algorithms by reducing the influence of intensity variations on the results.
"""

def intensity_normalization(image_data):
    # Rescale intensity values to range [0, 1]
    min_intensity = np.min(image_data)
    max_intensity = np.max(image_data)
    normalized_image_data = (image_data - min_intensity) / (max_intensity - min_intensity)
    return normalized_image_data

# Load NIfTI image
image_path = "/content/drive/My Drive/Datasets/nifti/output.nii.gz"
image = nib.load(image_path)
image_data = image.get_fdata()

# Perform intensity normalization
normalized_image_data = intensity_normalization(image_data)

# Save normalized NIfTI image
normalized_image = nib.Nifti1Image(normalized_image_data, image.affine)
output_path = 'normalized_image.nii.gz'
nib.save(normalized_image, output_path)

"""

*   We define a function intensity_normalization that takes the image data as input and rescales the intensity values to the range [0, 1].
*   We load the NIfTI image from the specified file path using nib.load() and extract the image data using image.get_fdata().


*   We perform intensity normalization on the image data using the intensity_normalization function.
*   We create a new NIfTI image object using nib.Nifti1Image with the normalized image data and the affine transformation matrix from the original image.


*   Finally, we save the normalized NIfTI image to a new file using nib.save().






"""

def plot_slice(image_data, title):
    # Take a slice from the middle of the image
    slice_index = image_data.shape[2] // 2
    slice_data = image_data[:, :, slice_index]

    plt.imshow(slice_data, cmap='gray')
    plt.title(title)
    plt.axis('off')
    plt.show()

# Plot a slice from the original image
plot_slice(image_data, title='Original Image')

# Plot a slice from the normalized image
plot_slice(normalized_image_data, title='Normalized Image')